[수업내용정리]

[격리레벨 설명(격리성, 격리수준)]
트랜잭션 처리 과정에서 두 개 이상의 트랜잭션이 서로 동시에 같은 자원을 접근할 때의 어떻게 각각의 트랜잭션을 처리해야 하는가?

공유자원 == 같은 자원
ex)화장실
A	[1칸]
B

동기화 처리 

[실습]
 NoticeDao 인터페이스
 	ㄴ hitUp() 조회수 증가
 	ㄴ getHit() 조회수를 얻어오는 메서드

[용어 이해]
1) Dirty Read 상황
	@Transaction[hitUp()] 조회수 증가
	[ seq=16  조회수:10          ~        다른처리                      ]
	                  →  11                                [롤백]10
	                             @Transaction[getHit()]
	                             seq=16 조회수 : 11 
 
 예시 : 위와 같이 조회수를 증가시키는 메서드가 실행되고 조회수를 가져오는 메서드가 실행되지만 롤백되면 값을 잘못 가져오는 경우
 - READ-UNCOMMITED 다른 트랜잭션에서 커밋하지 않은 데이터를 읽을 수 있다.
 - READ-COMMITED   다른 트랜잭션에 의해 커밋된 데이터를 읽을 수 있다.
	
2) Non-repeatable Read 상황
	조건) 반드시 반복적(2번 이상) 읽기
	[@Transaction getHit()                                    @Transaction getHit()]
	seq=16        10                                            seq=16        11                     
                              @Transaction[hitUp()] 조회수 증가
                              	seq=16        11    
 예시 : 위와 같이 같은 작업이 두번 되면서 서로 다른 조회수 값을 갖는 경우
 - REPEATABLE_READ 처음에 읽어 온 데이터와 두 번째 읽어 온 데이터가 동일한 값을 갖는다.
 
3) Phantom Read 상황
	조건 : 여러 개의 레코드를 한 번에 읽어오는 작업을 반복
	SELECT *
	FROM emp
	WHERE deptno = 30;	-- 사원 6명 
	
	[ 1 ]
	[ 2 ]
	[ 3 ]
	[ 4 ]
	[ 5 ]
	[ 6 ]
	
	@Transaction DELETE emp 30 1명 삭제
	
	SELECT *
	FROM emp
	WHERE deptno = 30;	-- 사원 5명
	
	[ 1 ]
	[ 2 ]
	[ 3 ]
	[ 4 ]
	[ 5 ]
	
	
	
	
	
	
	
	
	
	
	
	